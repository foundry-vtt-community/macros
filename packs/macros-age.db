{"name":"First Aid","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{"core":{"sourceId":"Macro.SpRKDGoFFi288Fhj"}},"scope":"global","command":"/* This macro is specific to the AGE System (unoffical) game system.\n *\n * In AGE system games such as Modern AGE, The Expanse, etc., when a\n * character is reduced to 0 health they're not yet dead - it's more\n * like they've run out of luck. At that point any further damage\n * applied may be \"bought off\" by taking the injured condition if\n * they've not yet taken that condition, or the wounded condition\n * if they have already taken the injured condition. When taking\n * either injured or wounded, the character accounts for 1d6 points\n * of damage. Once wounded, any further damage will result in taking\n * the dying condition, at which point they will being to lose CON\n * points (1/round on their turn) until they reach -3, or until\n * someone successfully administers First Aid to stabalize them.\n * \n * Use this macro if a character successfully applies First Aid\n * to a dying character to stabalize them and remove the dying\n * condition.\n * \n * This macro requires that the game system be \"age-system\" so that\n * the actor will have the appropriate structure.\n * \n * Author: schlosrat\n */\n\nif (game.system.id === 'age-system') {\n   // Responses based on the current conditions and situation\n   let flavor1 = \"Moaning: Uhhhhmmmmmnnnn\";\n   let flavor2 = \"Uhhhh, what happened?\";\n   let flavor3 = \"Did I miss anything?\";\n   let flavor4 = \"I'm feeling much better now!\";\n   let flavor5 = \"Knock it off! I don't need any more damn bandages!\";\n\n   // Get the speaker for the message\n   // const this_speaker = ChatMessage.getSpeaker();\n\n   let ageSystemActor = null;\n   if (speaker.token) ageSystemActor = game.actors.tokens[speaker.token];\n   if (!ageSystemActor ) ageSystemActor = game.actors.get(speaker.actor);\n   if (ageSystemActor ) {\n      let rollData = {};\n      rollData.injured = actor .data.data.conditions.injured;\n      rollData.wounded = actor .data.data.conditions.wounded;\n      rollData.unconscious = ageSystemActor .data.data.conditions.unconscious;\n      rollData.dying = ageSystemActor .data.data.conditions.dying;\n      rollData.consv = ageSystemActor .data.data.abilities.cons.value;\n\n      // Revise token chat if ancestry/origin === Belter\n      if (ageSystemActor.data.data.ancestry === 'Belter') {\n         flavor2 = \"Uhhhh, keting ta go ere?\";\n         flavor3 = \"ta du mi miss wating?\";\n         flavor4 = \"Mi du sensa xÃ©lixup mogut xitim!\";\n         flavor5 = \"Setop im! mi na du mowteng mo kaka felota xep!!\";\n      }\n\n      // If the dying condition is currently set\n      if (rollData.dying) {\n         ageSystemActor.update({\"data.conditions.dying\": false});\n         if (rollData.consv > -3) {\n            ageSystemActor.update({\"data.conditions.unconscious\": false});\n            ageSystemActor.update({\"data.conditions.helpless\": false});\n            ChatMessage.create({speaker: speaker, content: flavor2});\n         } else {\n            ChatMessage.create({speaker: speaker, content: flavor1});\n         }\n      } else if (rollData.unconscious) {\n         ChatMessage.create({speaker: speaker, content: flavor1});\n      } else {\n         ChatMessage.create({speaker: speaker, content: flavor5});\n      }\n   }\n}","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"4OBMDhKaZfS5xME5"}
{"name":"Ding Fries Are Done","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{"core":{"sourceId":"Macro.PiSCXLxqdGiPZspw"}},"scope":"global","command":"/* This macro is specific to the AGE System (unoffical) game system.\n *\n * In AGE system games such as Modern AGE, The Expanse, etc., when a\n * character is reduced to 0 health they're not yet dead - it's more\n * like they've run out of luck. At that point any further damage\n * applied may be \"bought off\" by taking the injured condition if\n * they've not yet taken that condition, or the wounded condition\n * if they have already taken the injured condition. When taking\n * either injured or wounded, the character accounts for 1d6 points\n * of damage. Once wounded, any further damage will result in taking\n * the dying condition, at which point they will being to lose CON\n * points (1/round on their turn) until they reach -3, or until\n * someone successfully administers First Aid to stabalize them.\n * \n * This macro automates that process with firendly chat messages\n * to help all see what's going on.\n * \n * This macro requires that the game system be \"age-system\" so that\n * the actor will have the appropriate structure.\n * \n * Author: schlosrat\n */\n\nif (game.system.id === 'age-system') {\n   // Responses based on the condition(s) being applied\n   let flavor1 = \"Ouch! That hurt!\";\n   let flavor2 = \"Dang! That really hurt!\";\n   let flavor3 = \"Good by cruel world!\";\n   let flavor4 = \"tick...\";\n   let flavor5 = \"Ding! Fries are done!\";\n   let flavor6 = \"He's dead, Jim!\";\n\n   // Get the speaker for the message\n   // const this_speaker = ChatMessage.getSpeaker();\n\n   let ageSystemActor = null;\n   if (speaker.token) ageSystemActor = game.actors.tokens[speaker.token];\n   if (!ageSystemActor ) ageSystemActor = game.actors.get(speaker.actor);\n   if (ageSystemActor ) {\n      let conditions = ageSystemActor .data.data.conditions;\n      let abilities = ageSystemActor .data.data.abilities;\n      let speed = ageSystemActor .data.data.speed;\n      let origin = ageSystemActor .data.data.ancestry;\n      let rolled = false;\n      let flavor = {};\n\n      let isProne = conditions.prone;\n      let isFreeFalling = conditions.freefalling;\n      let isInjured = conditions.injured;\n      let isWounded = conditions.wounded;\n      let isDying = conditions.dying;\n      let isFatigued = conditions.fatigued;\n      let isExhausted = conditions.exhausted;\n      let isHelpless = conditions.helpless;\n      let isUnconcious = conditions.unconcious;\n      let consValue = abilities.cons.value;\n\n      // Make sure this actor has their baseConValue recorded as a flag\n      if (ageSystemActor.getFlag(\"world\", \"baseConValue\") === undefined) {\n         ageSystemActor.setFlag(\"world\", \"baseConValue\", abilities.cons.value);\n      } else if (abilities.cons.value > ageSystemActor.getFlag(\"world\", \"baseConValue\")) {\n         ageSystemActor.setFlag(\"world\", \"baseConValue\", abilities.cons.value);\n      }\n\n      // Make sure this actor has their baseSpeed recorded as a flag\n      if (ageSystemActor.getFlag(\"world\", \"baseSpeed\") === undefined) {\n         ageSystemActor.setFlag(\"world\", \"baseSpeed\", speed.total);\n      } else if (speed.total > ageSystemActor.getFlag(\"world\", \"baseSpeed\")) {\n         ageSystemActor.setFlag(\"world\", \"baseSpeed\", speed.total);\n      }\n\n      if (origin === \"Belter\") {\n         flavor1 = \"Ouch! Deting hurt!\";        // English: \"Ouch! deting hurt!\"\n         flavor2 = \"Dang! Deting REALLY hurt!\"; // English: \"Dang! deting really hurt!\"\n         flavor3 = \"Gut by cruel world!\";       // English: \"Gut by cruel world!\"\n         // flavor4 = \"tick...\";                   // Same in English\n         // flavor5 = \"Ding! Fries are done!\";     // Same in English\n         flavor6 = \"Im's det, Jim!\";            // English: \"Im's det, Jim\"\n      }\n\n      // If the dying condition is currently set\n      if (isDying) {\n         // Every round the character will loose a point of CON until they get to -3\n         if (consValue < -2) {\n            ChatMessage.create({speaker: speaker, content: flavor6}); // He's dead, Jim!\n         } else {\n            ageSystemActor.update({\"data.abilities.cons.value\": (consValue - 1)});\n            if (consValue < -1) {\n               ChatMessage.create({speaker: speaker, content: flavor5}); // Ding! Fries are done!\n            } else {\n               ChatMessage.create({speaker: speaker, content: flavor4}); // tick...\n            }\n         }\n      } else if (isWounded) {\n         // Character was already wounded, set the dying condition\n         // Dying characters are also unconscious, and helpless\n         // Helpes characters can't move. Set the actor's speed.mod = -speed.total\n         if (!isFreeFalling && !isProne) isProne = true;\n\n         ageSystemActor.update({\n            \"data\": {\n               \"conditions.dying\": true,\n               \"conditions.unconscious\": true,\n               \"conditions.helpless\": true,\n               \"conditions.prone\": isProne,\n               \"speed.total\": 0,\n            }\n         });\n         // If not freefalling, then character will also be prone\n         ChatMessage.create({speaker: speaker, content: flavor3}); // Good by cruel world!\n      } else if (isInjured) {\n         // Character was already injured and needs to advance to wounded\n         // const chatMessage = {flavor2, speaker}; // Dang! That REALLY hurt!\n         flavor = flavor2;\n         rolled = true;\n         if (conditions.exhausted) {\n            ageSystemActor.update({\"data.conditions.helpless\": true});\n            // Set the actor's speed.mod = -speed.total\n            ageSystemActor.update({\"data.speed.total\": 0});\n         } else {\n            ageSystemActor.update({\"data.conditions.exhausted\": true});\n            // Set the actor's speed.mod = speed.mod - speed.base/2, rounding up\n            ageSystemActor.update({\"data.speed.total\": Math.floor(ageSystemActor.getFlag(\"world\", \"baseSpeed\")/2)});\n         }\n         // Set the wounded condition\n         ageSystemActor.update({\"data.conditions.wounded\": true});\n         // Add the exhausted condition,\n         //    if already exhausted then helpless\n      } else {\n         // Character was uninjured prior to this damage\n         flavor = flavor1;\n         rolled = true;\n         // Set the injured condition\n         ageSystemActor.update({\"data.conditions.injured\": true});\n         // Add the fatigued condition,\n         //    if already fatigued then exhausted,\n         //    if already exhausted then helpless\n         if (isExhausted) {\n            ageSystemActor.update({\"data.conditions.helpless\": true});\n            // Set the actor's speed.mod = -speed.total\n            ageSystemActor.update({\"data.speed.total\": -speed.total});\n         } else if (isFatigued) {\n            ageSystemActor.update({\"data.conditions.exhausted\": true});\n            // Set the actor's speed.mod = speed.mod - speed.base/2, rounding up\n            ageSystemActor.update({\"data.speed.total\": Math.floor(ageSystemActor.getFlag(\"world\", \"baseSpeed\")/2)});\n         } else {\n            ageSystemActor.update({\"data.conditions.fatigued\": true});\n         }\n      }\n\n      if (rolled) {\n         // Roll 1d6 to see how much damage was bought off by taking the Wounded condition\n         let roll = new Roll(\"1d6\").roll();\n         // Announce the roll\n         const chatMessage = {flavor, speaker}; // Dang! That REALLY hurt!\n         roll.toMessage(chatMessage);\n         console.log(roll)\n      }\n   }\n}","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"8VxGi7VLd4TAY6Zc"}
{"name":"Breather","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{"core":{"sourceId":"Macro.X7tuD6cm4i03ugQb"}},"scope":"global","command":"/* This macro is specific to the AGE System (unoffical) game system.\n *\n * In AGE system games such as Modern AGE, The Expanse, etc., a character\n * may restore 1d6 + level + CON health at the end of a scene by\n * \"taking a breather\". This macro automates that for players or GM\n * along with generating a friendly chat message to announce this\n * in the chat log.\n *\n * This macro requires that the game system be \"age-system\" so that\n * the actor will have the appropriate structure.\n * \n * Oringial macro code: vkdolea\n */\n\nif (game.system.id === 'age-system') {\n   let flavor = \"Taking a breather here, boss...\";\n   // Change the value between \"\" to change flavor on chat message\n\n   // Make sure we've got an actor selected\n   let ageSystemActor = null;\n   if (speaker.token) ageSystemActor = game.actors.tokens[speaker.token];\n   if (!ageSystemActor ) ageSystemActor = game.actors.get(speaker.actor);\n   if (ageSystemActor ) {\n      // Collect the infor we'll need to perform the roll\n      let rollData = {};\n      rollData.level = ageSystemActor .data.data.level;\n      rollData.cons = ageSystemActor .data.data.abilities.cons.total;\n\n      // Revise token chat if ancestry/origin === Belter\n      if (ageSystemActor.data.data.ancestry === 'Belter') {\n         flavor = \"Mi leta-go wa bek xiya bosmang\";\n      }\n\n      // Configure the chat message to be sent\n      const chatMessage = {flavor, speaker};\n\n      // Make the roll and send the message\n      let roll = new Roll(\"1d6 + @level + @cons\", rollData).roll();\n      roll.toMessage(chatMessage);\n\n      // Apply the effect\n      const healed = roll.total;\n      const curHP = ageSystemActor.data.data.health.value;\n      const maxHP = ageSystemActor.data.data.health.max;\n      let newHP = 0;\n      if ((healed + curHP) > maxHP) {\n         newHP = maxHP;\n      } else {\n         newHP = ageSystemActor.data.data.health.value + healed;\n      }\n      ageSystemActor.update({\"data.health.value\": newHP});\n   }\n}","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"FSPF5OLBFgcgL0Bk"}
{"name":"Take Cover","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{"core":{"sourceId":"Macro.hdVKy6Y8gRg4Omlb"}},"scope":"global","command":"/* This macro is specific to the AGE System (unoffical) game system.\n *\n * In AGE system games such as Modern AGE, The Expanse, etc., a\n * character can improve their defense score by \"taking cover\",\n * which can either happen if the character uses their move to\n * do so, or applies the \"Take Cover\" stunt.\n * \n * This macro automates that process of applying a cover setting\n * to all the currently selected tokens based on a dialog box\n * used to select the cover value to be applied. The effect of\n * cover is implemented as an applied unique Active Effect - \n * meaning the actor can only have on \"Cover\" effect active, and\n * applying a new one will remove the old one so that there is\n * only ever one active.\n * \n * This macro requires that the game system be \"age-system\"\n * since the effect applied is specific to that system.\n * \n * Author: schlosrat\n */\n\n// define removeNamedEffect function\nasync function removeNamedEffect(ageSystemActor, effectData) {\n    // Look to see if there's already a Cover effect\n    const item = ageSystemActor.data.effects.find(i =>i.label === effectData.label);\n    if (item != undefined) {\n        // Delete it if there is one\n        const deleted = await ageSystemActor.deleteEmbeddedEntity(\"ActiveEffect\", item._id); // Deletes one EmbeddedEntity\n    }\n}\n\n// define applyUniqueEffect function\nasync function applyUniqueEffect(ageSystemActor, effectData) {\n    // Look to see if there's already a Cover effect\n    removeNamedEffect(ageSystemActor, effectData);\n\n    // Create a new fresh one with the new settings\n    await ageSystemActor.createEmbeddedEntity(\"ActiveEffect\", effectData); \n}\n\nasync function takeCover () {\n\n    if (game.system.id === 'age-system') {\n        // import applyUniqueEffect from './applyUniqueEffect.js';\n        // import removeNamedEffect from './removeNamedEffect.js';\n\n        let applyChanges = false;\n        new Dialog({\n            title: `Take Cover!`,\n            content: `\n                <form>\n                    <div class=\"form-group\">\n                        <label>Cover Rating:</label>\n                        <select id=\"cover-type\" name=\"cover-type\">\n                            <option value=\"nochange\">No Change</option>\n                            <option value=\"0\">No Cover</option>\n                            <option value=\"1\">1</option>\n                            <option value=\"2\">2</option>\n                            <option value=\"3\">3</option>\n                        </select>\n                    </div>\n                </form>\n                `,\n            buttons: {\n                yes: {\n                    icon: \"<i class='fas fa-check'></i>\",\n                    label: `Apply Changes`,\n                    callback: () => applyChanges = true\n                },\n                no: {\n                    icon: \"<i class='fas fa-times'></i>\",\n                    label: `Cancel Changes`\n                },\n            },\n            default: \"yes\",\n            close: html => {\n                if (applyChanges) {\n                    // Chat message to announce this effect\n                    const flavor = \"Leta-go cover!\"; // LangBelta for \"Take cover!\"\n                    \n                    // const effect = 'icons/svg/blood.svg'; // path to effect img\n                    const state = false; // true if turn on , false if turn off\n                    \n                    let coverVal = 0;\n                    let coverType = html.find('[name=\"cover-type\"]')[0].value || \"none\";\n                    switch (coverType) {\n                        case \"0\":\n                            coverVal = 0;\n                            break;\n                        case \"1\":\n                            coverVal = 1;\n                            break;\n                        case \"2\":\n                            coverVal = 2;\n                            break;\n                        case \"3\":\n                            coverVal = 3;\n                            break;\n                        case \"nochange\":\n                        default:\n                    }\n                    \n                    // NOTE! Currently (4/11/21) the AGE System (unofficial) doesn't fully support Active effects\n                    // so at this time we need to to apply the effect in both .mod and .total so that it will both\n                    // show up on the character sheet and have an effect. Once VKDolea updates AGE System to handle\n                    // Active Effects correctly this (what we have below currently) will ilkely double the effect.\n                    // When that time comes we will most likely need to trim this down to only affecting the .mod\n                    const effectData = {\n                        label : \"Cover\",\n                        icon : \"icons/svg/shield.svg\",\n                        duration: {rounds: 10},\n                        changes: [{\n                            \"key\": \"data.defense.total\",\n                            \"mode\": 2, // Mode 2 is for ADD.\n                            \"value\": coverVal,\n                            \"priority\": 0\n                        },{\n                            \"key\": \"data.defense.mod\",\n                            \"mode\": 2, // Mode 2 is for ADD.\n                            \"value\": coverVal,\n                            \"priority\": 0\n                        }]\n                    };\n            \n                    const selected = canvas.tokens.controlled;\n                    // console.log(selected)\n                    selected.forEach(token => {\n                        if (coverVal) {\n                            // Apply the cover effect\n                            applyUniqueEffect(token.actor, effectData);\n                        } else {\n                            removeNamedEffect(token.actor, effectData);\n                        }\n                        // Announce the reset in chat\n                        // let this_speaker = ChatMessage.getSpeaker(token);\n                        // ChatMessage.create({speaker: this_speaker, content: flavor}); // All set, boss!\n                        /**/\n                    })\n                }\n            }\n        }).render(true);\n    }\n}\n\ntakeCover();","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"KWQWBAqL4n7BIEc1"}
{"name":"Clear Conditions","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{"core":{"sourceId":"Macro.dMP1bnphJqD3PiOZ"}},"scope":"global","command":"/* This macro is specific to the AGE System (unoffical) game system.\n *\n * This macro requires that the game system be \"age-system\" so that\n * the actor will have the appropriate structure.\n * \n * Author: schlosrat\n */\n\nif (game.system.id === 'age-system') {\n\n    // Get the list of all the selected tokens\n    const selected = canvas.tokens.controlled;\n    \n    // For each selected token...\n    selected.forEach(token => {\n\n        // Get the actor for this token\n        let ageSystemActor = token.actor;\n        \n        // Set the flavor to use in the chat message\n        let flavor = \"All set, boss!\"\n        if (ageSystemActor.data.data.ancestry === \"Belter\") flavor = \"Kowl set, bosmang!\";\n        // Get the abilities for this actor\n        // let abilities = ageSystemActor.data.data.abilities;\n        \n        // Record the actor's current CON value\n        let conValue = ageSystemActor.data.data.abilities.cons.value;\n        \n        // Check for a baseConValue flag\n        let baseCon = ageSystemActor.getFlag(\"world\", \"baseConValue\");\n        \n        // If there is a baseConValue flag set...\n        if (baseCon != undefined) {\n            // And if the current CON is less than the baseConValue\n            if (conValue < baseCon) {\n                conValue = baseCon;\n            }\n        }\n        \n        // Do all the updates in a single call to minimize trips to the backend\n        ageSystemActor.update({\n            \"data\": {\n                \"conditions.blinded\": false,\n                \"conditions.deafened\": false,\n                \"conditions.dying\": false,\n                \"conditions.exhausted\": false,\n                \"conditions.fatigued\": false,\n                \"conditions.freefalling\": false,\n                \"conditions.helpless\": false,\n                \"conditions.hindered\": false,\n                \"conditions.injured\": false,\n                \"conditions.prone\": false,\n                \"conditions.restrained\": false,\n                \"conditions.unconscious\": false,\n                \"conditions.wounded\": false,\n                \"abilities.cons.value\": conValue,\n            }\n        });\n\n        // Get the speaker for this token\n        let this_speaker = ChatMessage.getSpeaker({token: token});\n\n        // Send a friendly chat message from this token\n        ChatMessage.create({speaker: this_speaker, content: flavor}); // All set, boss!\n    });\n}","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"Oq3LxXluV7FLKFuh"}
{"name":"Clear Cover","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{"core":{"sourceId":"Macro.WiPS6xoigBEISPou"}},"scope":"global","command":"/* This macro is specific to the AGE System (unoffical) game system.\n *\n * In AGE system games such as Modern AGE, The Expanse, etc., a\n * character can improve their defense score by \"taking cover\",\n * which can either happen if the character uses their move to\n * do so, or applies the \"Take Cover\" stunt.\n * \n * This macro makes it a one-button click to remove the cover\n * active effect from all selected tokens.\n * \n * This macro requires that the game system be \"age-system\"\n * since the effect applied is specific to that system.\n * \n * Author: schlosrat\n */\n\n// define removeNamedEffect function\nasync function removeNamedEffect(ageSystemActor, effectData) {\n    // Look to see if there's already a Cover effect\n    const item = ageSystemActor.data.effects.find(i =>i.label === effectData.label);\n    if (item != undefined) {\n        // Delete it if there is one\n        const deleted = await ageSystemActor.deleteEmbeddedEntity(\"ActiveEffect\", item._id); // Deletes one EmbeddedEntity\n    }\n}\n\nasync function clearCover () {\n    if (game.system.id === 'age-system') {\n        const effectData = {\n            label : \"Cover\",\n            icon : \"icons/svg/shield.svg\",\n            duration: {rounds: 10},\n            changes: [{\n                \"key\": \"data.defense.total\",\n                \"mode\": 2, // Mode 2 is for ADD.\n                \"value\": 0,\n                \"priority\": 0\n            },{\n                \"key\": \"data.defense.mod\",\n                \"mode\": 2, // Mode 2 is for ADD.\n                \"value\": 0,\n                \"priority\": 0\n            }]\n        };\n        const selected = canvas.tokens.controlled;\n        // console.log(selected)\n        selected.forEach(token => {\n            removeNamedEffect(token.actor, effectData);\n        })\n    }\n}\n\nclearCover();","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"jMQVJVE4PqoyWCQC"}
{"$$deleted":true,"_id":"FSPF5OLBFgcgL0Bk"}
{"$$deleted":true,"_id":"Oq3LxXluV7FLKFuh"}
{"$$deleted":true,"_id":"jMQVJVE4PqoyWCQC"}
{"$$deleted":true,"_id":"8VxGi7VLd4TAY6Zc"}
{"$$deleted":true,"_id":"KWQWBAqL4n7BIEc1"}
