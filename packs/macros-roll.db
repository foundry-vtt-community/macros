{"_id":"DKxkQhiyOQMCCcGG","name":"Wandering Monsters","type":"script","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","scope":"global","command":"// setting variables\nconst tableName = \"Wandering Monsters\";\nconst msgContent = \"Wandering Monster roll was: \";\n\n// roll to check for wandering monster\nconst result = (await new Roll(`1d20`).roll()).total;\n\n// create the message\nconst chatData = {\n  content: msgContent + result,\n  whisper: game.users.filter(u => u.isGM).map((u) => u.id),\n};\nChatMessage.create(chatData);\n\n// In this example, a roll between 17-20 will generate a roll from the Table. Tweak as needed!\nif (result >= 17) {\n  const table = game.tables.getName(tableName);\n  table.draw();\n}","folder":null,"sort":0,"permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"flags":{}}
{"_id":"GbfsxR8dVRUtQYG0","name":"Roll Ammunition Die","type":"script","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","scope":"global","command":"/*\nAuthor: stan#1549 (github.com/janssen-io)\n\nDescription:\nRoll cascading dice instead of keeping track of ammunition.\nExample:\n  When you shoot ammunition, roll a d12. On a 1, it gets replaced with a d10.\n  All the way down to a d4, after which you have a single shot left.\n  On average this gives 12 + 10 + 8 + 6 + 4 + 1 = 41 shots (for a d12)\n  If you need more than 61 shots (d20), then equip a second piece of the same\n  ammunition and give it its own ammo die.\n*/\n\n(() => {\n  if (!token) {\n    ui.notifications.warn(\"No character selected!\");\n    return;\n  }\n\n  const dieMap = {\n    20: 12,\n    12: 10,\n    10: 8,\n    8: 6,\n    6: 4,\n    4: 1,\n    1: 0\n  }\n\n  async function rollDie(html, ammo) {\n    const ammoId = html[0].querySelector('input:checked')?.value;\n    if (!ammoId) {\n      ui.notifications.error(\"No ammunition selected.\");\n      return;\n    }\n    const diceInputs = Array.from(html[0].querySelectorAll('input[type=number]'));\n    const dice = diceInputs.reduce((curr, input) => (curr[input.name] = input.value, curr), {});\n\n    const die = dice[ammoId];\n    const roll = new Roll(`1d${die}`);\n    await roll.roll();\n    dice[ammoId] = roll.total === 1 ? (dieMap[die] || die - 1) : die;\n    token.actor.unsetFlag('world', 'ammunition-dice')\n      .then(entity => entity.setFlag('world', 'ammunition-dice', dice));\n    roll.toMessage({\n      flavor: `[Ammunition roll] ${token.name} fires a(n) ${ammo.find(a => a.id == ammoId).name}!`\n    });\n  }\n\n  function updateDice(html) {\n    const diceInputs = Array.from(html[0].querySelectorAll('input[type=number]'));\n    const dice = diceInputs.reduce((curr, input) => (curr[input.name] = input.value, curr), {});\n\n    token.actor.unsetFlag('world', 'ammunition-dice')\n      .then(entity => entity.setFlag('world', 'ammunition-dice', dice));\n  }\n\n  function createForm(ammo, dice) {\n    const options = ammo.map(item => `\n      <tr>\n        <td><input type=\"radio\" name=\"item\" value=\"${item.id}\" checked /></td>\n        <td>${item.name}</td>\n        <td>d<input type=\"number\" name=\"${item.id}\" value=\"${dice[item.id] || 12}\" min=\"1\" max=\"20\" required ${game.user.isGM ? '' : 'disabled'}/></td>\n      </td>\n      `);\n    return `<table><thead><tr><td></td><td>Ammunition</td><td>Die</td></tr></thead>${options.join('')}</table>`;\n  }\n\n  function createDialog(token) {\n    const dice = token.actor.getFlag('world', 'ammunition-dice') || {};\n    const ammunition = token.actor.items.filter(i => i.type == \"consumable\" && i.data.data.consumableType == \"ammo\");\n\n    if (ammunition.length === 0) {\n      ui.notifications.error(\"You have no ammunition.\");\n      return;\n    }\n\n    const form = createForm(ammunition, dice);\n\n    return new Dialog({\n      title: \"Roll ammunition die\",\n      content: form,\n      buttons: {\n        yes: { label: \"Roll\", callback: async html => rollDie(html, ammunition) },\n        no: (game.user.isGM ? { label: \"Update\", callback: html => updateDice(html) } : { label: \"Cancel\" })\n      },\n      default: (game.user.isGM ? 'no' : 'yes')\n    }).render(true);\n  }\n\n  createDialog(token);\n\n})();","folder":null,"sort":0,"permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"flags":{}}
{"_id":"GgFydAwlZwXQocph","name":"Roll Table","type":"script","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","scope":"global","command":"// Simple macro example to only roll from a table and whisper the result to the DM\n\n(async () => {\n    const table = game.tables.find(t => t.name === \"name of your table\");\n    let roll = await table.roll();\n    \n    let chatData = {\n        user: game.user._id,\n        speaker: ChatMessage.getSpeaker(),\n        content: roll.results[0].data.text,\n        whisper: game.users.filter(u => u.isGM).map(u => u._id)\n    };\n    ChatMessage.create(chatData, {});\n})();","folder":null,"sort":0,"permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"flags":{}}
{"_id":"ZaiiiR9KPBfzHvea","name":"Roll Initiatives","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"/**\n * Takes all selected tokens and adds them to the combat tracker. Then rolls initative for all NPC tokens.\n */\nasync function main() {\n  await canvas.tokens.toggleCombat();\n  game.combat.rollNPC({ messageOptions: { rollMode: CONST.DICE_ROLL_MODES.PRIVATE }})\n}\nmain();","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"ZemznICASrYCzvVU","name":"Average Roll Results","type":"script","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Reads the chat log for a specific type of die rolled and returns the average of that die type. If no input is provided, it will check all d20 rolls.\n */\n\nlet dialogue = new Dialog({\n    title: `Dice rolls to check`,\n    content: `<p>Enter the type of dice to check: <input type=\"number\" id=\"diceFacesToCheck\"></p>`,\n    buttons: {\n        one: {\n            icon: '',\n            label: 'Submit',\n            callback: (html) => {\n                const input = html.find('#diceFacesToCheck').val();\n                const diceToCheck = input ? parseInt(input) : 20;\n                const chatLog = game.messages;\n                let rolls = 0;\n                let total = 0;\n\n                chatLog.forEach(entry => {\n                    if (entry.roll) {\n                        const { terms } = entry.roll;\n                        terms\n                            .filter(die => die.faces === diceToCheck)\n                            .forEach(die => {\n                                rolls = rolls + die.number;\n                                total = total + die.total;\n                            })\n                    }\n                });\n\n                console.log(rolls, total);\n\n                let dialogue = new Dialog({\n                    title: `Average d${diceToCheck} rolls`,\n                    content: `<p>Amount of d${diceToCheck}'s checked: ${rolls}</p><p>Average result: ${Math.round(((total / rolls) + Number.EPSILON) * 100) / 100}</p>`,\n                    buttons: {\n                        one: {\n                            icon: '',\n                            label: 'Close'\n                        }\n                    }\n                })\n\n                dialogue.render(true)\n            }\n        }\n    }\n})\n\ndialogue.render(true)","folder":null,"sort":0,"permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"flags":{"core":{"sourceId":"Macro.iESUAWGiVgqhrc45"}}}
{"_id":"cj0Sm0kWnHx11nFR","name":"Character Stat Roller","type":"script","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Generates character stats and outputs the table result.\n * Author: @Kekilla#7036 & KrishMero1792\n */\n \n// Formula for rolling \nconst statString = '4d6kh3';\n\n// times to roll those stats\nconst numRolls = 6;\n\n\n//////////////////////////////////////////\n// Don't touch anything below this line //\n//////////////////////////////////////////\nconst stats = Array(numRolls).fill(0).map(e=>new Roll(statString).evaluate({async: false}));\n\nconst rollData = stats[0].dice[0];\nconst {faces, values: keptRolls, results: rolls} = rollData;\nconst totalAverage = (faces/2 + 1) * keptRolls.length;\nconst totalDeviation = faces/2;\nconst totalLow = Math.ceil(totalAverage - totalDeviation);\nconst totalHigh = Math.ceil(totalAverage + totalDeviation);\n\nconst header = rolls.map((roll, index) => `<th>D${index + 1}</th>`).join('');\n\nlet tableRows = '';\nlet finalSum = 0;\nfor(let {terms, total} of stats) {\n  tableRows += `<tr style=\"text-align:center\">`;\n  tableRows += terms[0].results.map(({result, discarded}) => `<td style=\"${colorSetter(result, 1, faces, discarded)}\">${result}</td>`).join('');\n  tableRows += `<td style=\"border-left:1px solid #000; ${colorSetter(total, totalLow, totalHigh)}\">${total}</td></tr>`;\n  finalSum += total;\n}\n\nconst colspan = `colspan=\"${rolls.length + 1}\"`;\nconst center = `text-align:center;`;\n\nlet content = `\n  <table>\n    <tr>\n      <td ${colspan}><h2 style=\"margin-bottom:0; ${center}\">New Ability Scores</h2>\n      <div style=\"margin-bottom: 0.5rem; ${center}\">${statString} was rolled ${numRolls} times.</div></td>\n    </tr>\n    <tr style=\"${center} border-bottom:1px solid #000\">\n      ${header}\n      <th style=\"border-left:1px solid #000\">Total</th>\n    </tr>\n    ${tableRows}\n    <tr style=\"border-top: 1px solid #000\">\n      <th colspan=\"${rolls.length}\" style=\"${center}\">Final Sum:</th>\n      <th style=\"${center}\">${finalSum}</th>\n    </tr>\n  </table>\n`;\n\n\nChatMessage.create({content});\n\nfunction colorSetter(number,low,high, discarded)\n{\n  if(discarded === true) return 'text-decoration:line-through;color:gray';\n  if(number <= low) return 'color:red';\n  if(number >= high) return 'color:green';\n  return '';\n}","folder":null,"sort":0,"permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"flags":{}}
{"_id":"cktksne1wqrTiY7N","name":"Roll Die","type":"script","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","scope":"global","command":"//Script to roll a die\n//Equivalently could be done by changing the macro to chat and entering /r 1d6\n//You can roll any number and any type of dice by changing Roll to ndx\n    //n: number of dice\n    //x: value (number of sides) on die\nconst roll = new Roll(`1d6`);\nawait roll.toMessage({\n    flavor: \"Sneak Attack Damage\",\n});","folder":null,"sort":0,"permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"flags":{"core":{"sourceId":"Macro.8zQiFBIWQcemEtIe"}}}
{"_id":"fEzHEn3tGXXIRHpU","name":"Chartopia Roller","type":"script","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Make a roll from chartopia and output the results in the chat window.\n * If you find yourself using this macro often, please support chartopia on patreon.\n */\n\n// chart id from url. IE 19449 is the chart id in https://chartopia.d12dev.com/chart/19449/\nlet chartId = 19449;\n// only let the gm see the results. false = everyone sees in chat. true = gm whispered results.\nlet gmOnly = false;\n\n\n//////////////////////////////////\n/// Don't edit past this point ///\n//////////////////////////////////\n\nvar rootUrl = \"https://chartopia.d12dev.com/test/\";\n\nfunction roll(id) {\n  let request = new XMLHttpRequest();\n  request.open('GET', rootUrl+'dice-roll-result?chart_id='+id, true);\n\n  request.onload = function() {\n    if (request.status >= 200 && request.status < 400) {\n      // Success!\n      let whisper = !!gmOnly ? game.users.map(u => {\n          if (u.isGM) return u.id;\n      }) : [];\n      console.log('whisper',whisper);\n      let chatData = {\n        user: game.userId,\n        speaker: ChatMessage.getSpeaker(),\n        content: request.responseText,\n        whisper\n      };\n\n      ChatMessage.create(chatData, {});\n    } else {\n      // We reached our target server, but it returned an error\n      console.log(\"Server error.\");\n    }\n  };\n\n  request.onerror = function() {\n    // There was a connection error of some sort\n    console.log(\"Error getting result.\");\n  };\n\n  request.send();\n} \n\nroll(chartId);","folder":null,"sort":0,"permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"flags":{}}
{"_id":"sXxLpBqCRhCQeGLV","name":"Mass Roll Check","type":"script","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","scope":"global","command":"/*\n* Gets a list of selected tokens (or defaults to the user's character), provides a list of\n* skills, and then makes a roll for all the selected tokens with that skill. It then spits out\n* the poorly-formatted results to chat (or the GM if you uncomment the whisper line).\n*/\n\nlet targetActors = getTargetActors().filter(a => a != null);\nfunction checkForActors(){\n    if (!targetActors.length > 0)\n        throw new Error('You must designate at least one token as the roll target');\n};\ncheckForActors();\n\n// Choose roll type dialog\nlet rollTypeTemplate = `\n<div>\n    <div class=\"form-group\">\n        <label>Choose roll type</label>\n        <select id=\"selectedType\">\n            <option value=\"save\">Saving Throw</option>\n            <option value=\"ability\">Ability Check</option>\n            <option value=\"skill\">Skill Check</option>\n        </select>\n    </div>\n</div>`;\n\nlet chooseCheckType = new Dialog({\n    title: \"Choose check type\",\n    content: rollTypeTemplate,\n    buttons: {\n        ok: {\n            icon: '<i class=\"fas fa-check\"></i>',\n            label: \"OK\",\n            callback:  async (html) => {\n                let checkType = html.find(\"#selectedType\")[0].value;\n                selectedCheckDialog(checkType).render(true);\n            }\n        },\n        cancel: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: 'Cancel'\n        }\n    },\n    default: \"cancel\"\n});\n\n// Choose ability mod dialog\nfunction selectedCheckDialog(checkType) {\n\n    let dialogTitle = getCheckDialogTitle(checkType);\n    let dialogContent = getCheckTemplate(checkType);\n\n    return new Dialog({\n        title: dialogTitle,\n        content: dialogContent,\n        buttons: {\n            ok: {\n                icon: '<i class=\"fas fa-check\"></i>',\n                label: \"OK\",\n                callback: async (html) => {\n                    let id = html.find(\"#selectedAbility\")[0].value;\n\n                    let messageContent = `<div><h2>${checkType.toUpperCase()} Roll</h2></div>`\n                    for (let a of targetActors) {\n                        let name = a.name;\n                        let mod = 0;               \n                        switch (checkType) {\n                            case \"save\":\n                                mod = a.data.data.abilities[id].save;\n                                messageContent += `${name}: <b>[[1d20+${mod}]]</b> (${game.dnd5e.config.abilities[id]} saving throw)<br>`;\n                                break;\n                            case \"ability\":\n                                mod = a.data.data.abilities[id].mod + a.data.data.abilities[id].checkBonus;\n                                messageContent += `${name}: <b>[[1d20+${mod}]]</b> (${game.dnd5e.config.abilities[id]} check)<br>`;\n                                break;\n                            case \"skill\":\n                                mod = a.data.data.skills[id].total;\n                                messageContent += `${name}: <b>[[1d20+${mod}]]</b> (${game.dnd5e.config.skills[id]} (${a.data.data.skills[id].ability}) check)<br>`;\n                                break;\n                            default:\n                                objects = game.dnd5e.config.skills;\n                                break;\n                        }\n                    }\n    \n                    let chatData = {\n                        user: game.user.id,\n                        speaker: game.user,\n                        content: messageContent,\n                        // Uncomment the following line if you want the results whispered to the GM.\n                        // whisper: game.users.filter(u => u.isGM).map(u => u._id)\n                    };\n                    ChatMessage.create(chatData, {});\n                }\n            },\n            cancel: {\n                icon: '<i class=\"fas fa-times\"></i>',\n                label: 'Cancel'\n            }\n        },\n        default: \"cancel\"\n    });\n}\n\n// Gets list of selected tokens, or if no tokens are selected then the user's character.\nfunction getTargetActors() {\n    const character = game.user.character;\n    const controlled = canvas.tokens.controlled;\n    let actors = [];\n\n    if (controlled.length === 0) return [character] || null;\n\n    if (controlled.length > 0) {\n        let actors = [];\n        for (let i = 0; i < controlled.length; i++) {\n            actors.push(controlled[i].actor);\n    }\n\n    return actors;\n}\nelse throw new Error('You must designate at least one token as the roll target');\n}\n\n\n// Gets a template of abilities or skills, based on the type of check chosen.\nfunction getCheckTemplate(checkType) {\n    let objects = new Object();\n    \n    switch (checkType) {\n        case \"save\":\n        case \"ability\":\n            objects = game.dnd5e.config.abilities;\n            break;\n        case \"skill\":\n            objects = game.dnd5e.config.skills;\n            break;\n        default:\n            objects = game.dnd5e.config.skills;\n            break;\n    }\n\n    let template = `\n    <div>\n        <div class=\"form-group\">\n            <label>Choose check</label>\n            <select id=\"selectedAbility\">`\n    \n            for (let [checkId, check] of Object.entries(objects)) {\n                template += `<option value=\"${checkId}\">${check}</option>`;    \n            }            \n    \n    template += `</select>\n        </div>\n    </div>`;\n\n    return template;\n}\n\nfunction getCheckDialogTitle(checkType) {\n    switch (checkType) {\n        case \"save\":\n            return \"Saving Throw\"\n        case \"ability\":\n            return \"Ability Check\"\n        case \"skill\":\n            return \"Skill Check\"\n        default:\n            return \"Unknown Check\"\n    }\n}\n\nchooseCheckType.render(true);","folder":null,"sort":0,"permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"flags":{}}
{"_id":"xMJc8qLMu8rcTJ8z","name":"Token HP","type":"script","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Roll/Reroll selected token HP\n * Author: Tielc#7191\n */\n\nconst tokens = canvas.tokens.controlled;\nlet choice = 0;\n\nif (tokens.length > 0){\n\ttokens.forEach(rollHP);\n} else {\n\tprintMessage(\"No Tokens were selected\");\n}\n\nasync function rollHP(token, index){\n\tlet actor = token.actor;\n\tlet formula = actor.data.data.attributes.hp.formula;\n\t\t\n\tif (actor.data.type != \"npc\" || !formula) return;\n\t\n\tlet hp = (await new Roll(formula).roll()).total;\n\t\n\tawait actor.update({\"data.attributes.hp.value\": hp, \"data.attributes.hp.max\": hp});\n\t\n\tprintMessage('<h2>' + actor.data.name + '</h2><strong>HP:</strong> ' + actor.data.data.attributes.hp.value + '/' + actor.data.data.attributes.hp.max + '<span style=\"float:right\"><em>(' + token.data._id + ')</em></span>');\n}\n\nfunction printMessage(message){\n\tlet chatData = {\n\t\tuser : game.user._id,\n\t\tcontent : message,\n\t\tblind: true,\n\t\twhisper : game.users.filter(u => u.isGM).map(u => u.id)\n\t};\n\n\tChatMessage.create(chatData,{});\t\n}","folder":null,"sort":0,"permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"flags":{}}
