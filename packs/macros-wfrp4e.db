{"name":"Shopify Actor","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{"core":{"sourceId":"Macro.uZ7IXpcvltRysQH9"}},"scope":"global","command":"/*\n * Macro: Shopify WFRP4E actor\n * Version:0.9\n * Updated: 24-03-2021\n * Description: Adds WFRP trappings to a selected actor. The actor, compendium and availability types added are freely selectable. Quantities can also be set as per WFRP availability test rules.\n * Note: Shopify WFRP4E actor is based on previous work by Lars and Geekdad\n * Tip: The actor selector will default to 'Shop' if a character, npc or vehicle with that name is available\n */\n\nfunction getPackNames() {\n  let packs = [];\n  let keys = game.packs.keys();\n  let done = false;\n  while (!done) {\n    let key = keys.next();\n    done = key.done;\n    if (!done) {\n      let pack = game.packs.get(key.value);\n      if (pack.metadata.entity === \"Item\") {\n        packs.push({\n          key: key.value,\n          name: pack.metadata.label\n        });\n      }\n    }\n  }\n  return packs;\n}\n\nfunction getActorNames() {\n  let actors = [];\n  game.actors.entities.forEach(table => {\n    actors.push({\n      key: table.id,\n      name: table.name\n    });\n  });\n  return actors;\n}\n\nfunction filterCommon(item) {\n  return (item.data.data.availability && item.data.data.availability.value === \"common\") ? true : false\n}\n\nfunction filterScarce(item) {\n  return (item.data.data.availability && item.data.data.availability.value === \"scarce\") ? true : false\n}\n\nfunction filterRare(item) {\n  return (item.data.data.availability && item.data.data.availability.value === \"rare\") ? true : false\n}\n\nfunction filterExotic(item) {\n  return (item.data.data.availability && item.data.data.availability.value === \"exotic\") ? true : false\n}\n\nfunction filterArmoury(item) {\n  return (item.data.type === \"weapon\" || item.data.type === \"ammunition\" || item.data.type === \"armour\") ? true : false\n}\n\nfunction filterShop(item) {\n  return (item.data.type === \"trapping\") ? true : false\n  //  return (item.data.type === \"trapping\" &&  (item.data.data.trappingType.value===\"clothingAccessories\" || item.data.data.trappingType.value===\"toolsAndKits\" || item.data.data.trappingType.value===\"booksAndDocuments\" || item.data.data.trappingType.value===\"foodAndDrink\" || item.data.data.trappingType.value===\"ingredient\")) ? true : false\n}\n\n\nfunction filterHerbalist(item) {\n  return (item.data.type === \"trapping\" && item.data.data.trappingType.value === \"drugsPoisonsHerbsDraughts\") ? true : false\n}\n\nfunction filterContainers(item) {\n  return (item.data.type === \"container\") ? true : false\n}\n\nfunction getItem(pack, id) {\n  let item = pack.getEntity(id).then(function(entity) {\n    return entity\n  })\n  return item\n}\n\nasync function addToActor(packKey, actorKey, enableArmoury, enableShop, enableContainers, enableCommon, enableScarce, enableRare, enableExotic, loc, option) {\n\n  console.log(\"Getting compendium '\" + packKey + \"' and actor'\" + actorKey + \"'\")\n\n  let pack = game.packs.get(packKey);\n  let actor = game.actors.get(actorKey);\n\n  console.log(\"Getting all items with 'getEntity' and pushing them into the 'items' table\");\n  let items = [];\n  await pack.getIndex();\n  for (var i = 0; i < pack.index.length; i++) {\n    let item = await pack.getEntity(pack.index[i]._id)\n    items.push(item)\n  }\n  console.log(items)\n\n  if (option === \"optionEmpty\") {\n    console.log(\"Deleting actor's current items\");\n    let current = actor.data.items.map(i => i._id)\n    await actor.deleteEmbeddedEntity(\"OwnedItem\", current)\n  }\n\n  console.log(\"Applying filters\");\n  let inventory = items.filter(item => ((filterCommon(item) && enableCommon) || (filterScarce(item) && enableScarce) || (filterRare(item) && enableRare) || (filterExotic(item) && enableExotic)) && ((filterArmoury(item) && enableArmoury) || (filterShop(item) && enableShop) || (filterContainers(item) && enableContainers)))\n  console.log(inventory)\n\n  console.log(\"Creating new inventory\");\n  await actor.createEmbeddedEntity(\"OwnedItem\", inventory)\n\n  console.log(\"Updating quantities\");\n  let inventoryUpdate = actor.data.items.map(i => {\n\n    let p = 0\n    let m = 0\n    let container = {\n      _id: \"\",\n      data: {\n        quantity: {\n          value: 0\n        }\n      }\n    }\n    container._id = i._id\n\n    switch (i.data.availability.value) {\n      case \"common\":\n        p = (loc !== \"none\") ? 100 : 0\n        m = 2\n        break;\n      case \"scarce\":\n        p = (loc === \"city\") ? 90 : (loc === \"town\") ? 60 : (loc === \"village\") ? 30 : 0\n        m = 1\n        break;\n      case \"rare\":\n        p = (loc === \"city\") ? 45 : (loc === \"town\") ? 30 : (loc === \"village\") ? 15 : 0\n        m = 0.5\n        break;\n      default:\n        p = 0\n        m = 0\n    }\n    let availabilityRoll = Math.floor(Math.random() * 100) + 1\n    let base = (loc === \"village\") ? 1 : (Math.floor(Math.random() * 10) + 1)\n    if (availabilityRoll <= p) {\n      container.data.quantity.value = Math.ceil(base * m)\n    } else {\n      container.data.quantity.value = 0\n    }\n    //console.log(\"Availability Test '\" + loc + \"' for \" + i.data.availability.value + \" item '\" + i.name + \"'\" + ((availabilityRoll <= p) ? \"succeeded\" : \"failed\") + \" with \" + availabilityRoll + \"/\" + p + \". baseQ: \" + base + \" modQ:\" + m)\n    //console.log(\"Returning entity '\" + i.name + \"' with quantity : \" + container.data.quantity.value)\n    return container\n  })\n  await actor.updateEmbeddedEntity(\"OwnedItem\", inventoryUpdate)\n\n}\n\n/*main*/\nlet itemPacks = getPackNames();\nlet actorNames = getActorNames();\n\nlet content = `<form><div style=\"display: inline-block; width: 100%; margin-bottom: 10px\">\n\n<p>Add items from compendium to actor/token:</p>\n\n<label for=\"output-targetPack\" style=\"vertical-align: top; margin-right: 10px;\">Select Compendium:</label><br/>\n<select name='output-targetPack' id='output-targetPack' style=\"background-color: black;color: white;\">`\n\nitemPacks.forEach(item => {\n  let def = ((item.name === \"Trappings\") ? `selected` : ``)\n  content += `<option value='${item.key}' ` + def + `>${item.name}</option>`;\n});\ncontent += `</select><br/>\n\n<label for=\"output-tableKey\" style=\"vertical-align: top; margin-right: 10px;\">Actor:</label><br />\n<select name=\"output-tableKey\" id=\"output-tableKey\" style=\"background-color: black;color: white;\">`\n\nactorNames.forEach(table => {\n  let def = ((table.name === \"Shop\") ? `selected` : ``)\n  content += `<option value='${table.key}' ` + def + `>${table.name}</option>`;\n});\ncontent += `</select><br/>\n\n<br/>\n\n<p>Add items groupss</p>\n<input type=\"checkbox\"  id=\"enableArmoury\" name=\"enableArmoury\" value=true  style=\"vertical-align: middle; margin-right: 10px;\" checked>Armoury<br/>\n<input type=\"checkbox\"  id=\"enableShop\" name=\"enableShop\" value=true  style=\"vertical-align: middle; margin-right: 10px;\" checked>Shop<br/>\n<input type=\"checkbox\"  id=\"enableContainers\" name=\"enableContainers\" value=true  style=\"vertical-align: middle; margin-right: 10px;\" checked>Containers<br/>\n<br/>\n\n<p>Add items for availability types</p>\n<input type=\"checkbox\"  id=\"enableCommon\" name=\"enableCommon\" value=true  style=\"vertical-align: middle; margin-right: 10px;\" checked>Common<br/>\n<input type=\"checkbox\"  id=\"enableScarce\" name=\"enableScarce\" value=true  style=\"vertical-align: middle; margin-right: 10px;\" checked>Scarce<br/>\n<input type=\"checkbox\"  id=\"enableRare\" name=\"enableRare\" value=true  style=\"vertical-align: middle; margin-right: 10px;\" checked>Rare<br/>\n<input type=\"checkbox\"  id=\"enableExotic\" name=\"enableExotic\" value=true  style=\"vertical-align: middle; margin-right: 10px;\">Exotic<br/>\n<br/>\n\n<p>Set quantities per Availability Test rules</p>\n<input type=\"radio\" name=\"loc\" id=\"village\" value=\"village\" style=\"margin-right: 10px;\" checked>Village<br/>\n<input type=\"radio\" name=\"loc\" id=\"town\" value=\"town\" style=\"margin-right: 10px;\">Town<br/>\n<input type=\"radio\" name=\"loc\" id=\"city\"  value=\"city\" style=\"margin-right: 10px;\">City<br/>\n<input type=\"radio\" name=\"loc\" id=\"none\" value=\"none\" style=\"margin-right: 10px;\">None (0)<br/>\n<br/>\n\n<p>Current inventory options</p>\n<input type=\"radio\" name=\"options\" id=\"optionEmpty\" value=\"optionEmpty\" style=\"vertical-align: middle; margin-right: 10px;\" checked>Empty<br/>\n<input type=\"radio\" name=\"options\" id=\"optionAdd\" value=\"optionAdd\" style=\"vertical-align: middle; margin-right: 10px;\">Add<br/>\n<br/>\n\n</div><br /></form>`\n\nnew Dialog({\n  title: `Shopify WFRP4E actor`,\n  content: content,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: \"Shopify Actor\",\n      callback: (html) => {\n        let packKey = html.find(\"select[name='output-targetPack']\").val();\n        let actorKey = html.find(\"select[name='output-tableKey']\").val();\n        let enableArmoury = html.find(\"input[name='enableArmoury']:checked\").val();\n        let enableShop = html.find(\"input[name='enableShop']:checked\").val();\n        let enableContainers = html.find(\"input[name='enableContainers']:checked\").val();\n        let enableCommon = html.find(\"input[name='enableCommon']:checked\").val();\n        let enableScarce = html.find(\"input[name='enableScarce']:checked\").val();\n        let enableRare = html.find(\"input[name='enableRare']:checked\").val();\n        let enableExotic = html.find(\"input[name='enableExotic']:checked\").val();\n        let loc = html.find(\"input[name='loc']:checked\").val();\n        let option = html.find(\"input[name='options']:checked\").val();\n        addToActor(packKey, actorKey, enableArmoury, enableShop, enableContainers, enableCommon, enableScarce, enableRare, enableExotic, loc, option);\n      }\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: 'Cancel'\n    }\n  },\n  default: \"yes\"\n}).render(true);","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"1b6J1R2hfklcPayp"}
{"$$deleted":true,"_id":"1b6J1R2hfklcPayp"}
