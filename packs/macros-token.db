{"_id":"Cro7DdjJpepCX22U","name":"Light Picker","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"let dialogEditor = new Dialog({\n  title: `Token Light Picker`,\n  content: `Pick the light source the selected token is holding.`,\n  buttons: {\n    none: {\n      label: `None`,\n      callback: () => {\n        token.update({\"dimLight\": 0, \"brightLight\": 0, \"lightAngle\": 360,});\n        dialogEditor.render(true);\n      }\n    },\n    torch: {\n      label: `Torch`,\n      callback: () => {\n        token.update({\"dimLight\": 40, \"brightLight\": 20, \"lightAngle\": 360,});\n        dialogEditor.render(true);\n      }\n    },\n    lamp: {\n      label: `Lamp`,\n      callback: () => {\n        token.update({\"dimLight\": 45, \"brightLight\": 15, \"lightAngle\": 360,});\n        dialogEditor.render(true);\n      }\n    },\n    bullseye: {\n      label: `Bullseye Lantern`,\n      callback: () => {\n        token.update({\"dimLight\": 120, \"brightLight\": 60, \"lightAngle\": 45,});\n        dialogEditor.render(true);\n      }\n    },\n    hoodedOpen: {\n      label: `Hooded Lantern (Open)`,\n      callback: () => {\n        token.update({\"dimLight\": 60, \"brightLight\": 30, \"lightAngle\": 360,});\n        dialogEditor.render(true);\n      }\n    },\n    hoodedClosed: {\n      label: `Hooded Lantern (Closed)`,\n      callback: () => {\n        token.update({\"dimLight\": 5, \"brightLight\": 0, \"lightAngle\": 360,});\n        dialogEditor.render(true);\n      }\n    },\n    close: {\n      icon: \"<i class='fas fa-tick'></i>\",\n      label: `Close`\n    },\n  },\n  default: \"close\",\n  close: () => {}\n});\n\ndialogEditor.render(true)\n","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"F4KqUssiXZNULUFU","name":"Mirror Token Image","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"// Flips the selected token image along the Y axis.\n// Change mirrorY to mirrorX to flip across the X axis\nfor ( let token of canvas.tokens.controlled ) {\n  let flip = !token.data.mirrorY || false;\n  token.update({mirrorY: flip});\n};\n","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"XrxqpluWdtnNLlmq","name":"Shrink Or Enlarge","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"// Update selected tokens to flip between a 1x1 or a 2x2 grid.\n\nfor (let token of canvas.tokens.controlled) {\n  let newSize = (token.data.height == 1 && token.data.width == 1) ? 2 : 1;\n  token.update({\n    height: newSize,\n    width: newSize\n  });\n};\n","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"d7GncKN4hQNl2XLd","name":"Set Name and Bars","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"// Update all tokens on the map so that the name shows on hover and the bars always show.\n// Display Modes: ALWAYS, CONTROL, HOVER, NONE, OWNER, OWNER_HOVER\n\nconst tokens = canvas.tokens.placeables.map(token => {\n  return {\n    _id: token.id,\n    \"bar1.attribute\": \"attributes.hp\",\n    \"bar2.attribute\": \"attributes.ac.value\",\n    \"displayName\": CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER,\n    \"displayBars\": CONST.TOKEN_DISPLAY_MODES.OWNER\n  };\n});\n\ncanvas.scene.updateEmbeddedEntity('Token', tokens)\n","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"fnMfRlpMvuk92hU0","name":"Switch Images","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"// Allows swapping between two different .png images.\n// Token sides should have \"a\" and \"b\" at the end of the name like \"name-a.png\" and \"name-b.png\".\n// If you have a different ending, change aName and bName respectively.\n// Author: Phenomen\n\n// IMPORTANT. These two values MUST be the same length.\nlet aName = 'a.png'\nlet bName = 'b.png'\n\nlet tok = canvas.tokens.controlled[0];\nlet img = tok.data.img;\nvar currentSide = img[img.length - aName.length];\nimg = img.slice(0,-Math.abs(aName.length)) + (currentSide == 'a' ? bName: aName);\ntok.update({ img });\n","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"jBcKwGUwHS2V6nat","name":"Token Vision Configuration","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"chat","flags":{},"scope":"global","command":"// A macro for the Foundry virtual tabletop that lets a user configure their token's vision and lighting settings. This script is taken from Sky's foundry repo here: https://github.com/Sky-Captain-13/foundry/blob/master/scriptMacros/tokenVision.js.\n\nlet applyChanges = false;\nnew Dialog({\n  title: `Token Vision Configuration`,\n  content: `\n    <form>\n      <div class=\"form-group\">\n        <label>Vision Type:</label>\n        <select id=\"vision-type\" name=\"vision-type\">\n          <option value=\"nochange\">No Change</option>\n          <option value=\"dim0\">Self</option>\n          <option value=\"dim30\">Darkvision (30 ft)</option>\n          <option value=\"dim60\">Darkvision (60 ft)</option>\n          <option value=\"dim90\">Darkvision (90 ft)</option>\n          <option value=\"dim120\">Darkvision (120 ft)</option>\n          <option value=\"dim150\">Darkvision (150 ft)</option>\n          <option value=\"dim180\">Darkvision (180 ft)</option>\n          <option value=\"bright120\">Devil's Sight (Warlock)</option>\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Light Source:</label>\n        <select id=\"light-source\" name=\"light-source\">\n          <option value=\"nochange\">No Change</option>\n          <option value=\"none\">None</option>\n          <option value=\"candle\">Candle</option>\n          <option value=\"lamp\">Lamp</option>\n          <option value=\"bullseye\">Lantern (Bullseye)</option>\n          <option value=\"hooded-dim\">Lantern (Hooded - Dim)</option>\n          <option value=\"hooded-bright\">Lantern (Hooded - Bright)</option>\n          <option value=\"light\">Light (Cantrip)</option>\n          <option value=\"torch\">Torch</option>\n        </select>\n      </div>\n    </form>\n    `,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply Changes`,\n      callback: () => applyChanges = true\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel Changes`\n    },\n  },\n  default: \"yes\",\n  close: html => {\n    if (applyChanges) {\n      for ( let token of canvas.tokens.controlled ) {\n        let visionType = html.find('[name=\"vision-type\"]')[0].value || \"none\";\n        let lightSource = html.find('[name=\"light-source\"]')[0].value || \"none\";\n        let dimSight = 0;\n        let brightSight = 0;\n        let dimLight = 0;\n        let brightLight = 0;\n        let lightAngle = 360;\n        let lockRotation = token.data.lockRotation;\n        // Get Vision Type Values\n        switch (visionType) {\n          case \"dim0\":\n            dimSight = 0;\n            brightSight = 0;\n            break;\n          case \"dim30\":\n            dimSight = 30;\n            brightSight = 0;\n            break;\n          case \"dim60\":\n            dimSight = 60;\n            brightSight = 0;\n            break;\n          case \"dim90\":\n            dimSight = 90;\n            brightSight = 0;\n            break;\n          case \"dim120\":\n            dimSight = 120;\n            brightSight = 0;\n            break;\n          case \"dim150\":\n            dimSight = 150;\n            brightSight = 0;\n            break;\n          case \"dim180\":\n            dimSight = 180;\n            brightSight = 0;\n            break;\n          case \"bright120\":\n            dimSight = 0;\n            brightSight= 120;\n            break;\n          case \"nochange\":\n          default:\n            dimSight = token.data.dimSight;\n            brightSight = token.data.brightSight;\n        }\n        // Get Light Source Values\n        switch (lightSource) {\n          case \"none\":\n            dimLight = 0;\n            brightLight = 0;\n            break;\n          case \"candle\":\n            dimLight = 10;\n            brightLight = 5;\n            break;\n          case \"lamp\":\n            dimLight = 45;\n            brightLight = 15;\n            break;\n          case \"bullseye\":\n            dimLight = 120;\n            brightLight = 60;\n            lockRotation = false;\n            lightAngle = 52.5;\n            break;\n          case \"hooded-dim\":\n            dimLight = 5;\n            brightLight = 0;\n            break;\n          case \"hooded-bright\":\n            dimLight = 60;\n            brightLight = 30;\n            break;\n          case \"light\":\n            dimLight = 40;\n            brightLight = 20;\n            break;\n          case \"torch\":\n            dimLight = 40;\n            brightLight = 20;\n            break;\n          case \"nochange\":\n          default:\n            dimLight = token.data.dimLight;\n            brightLight = token.data.brightLight;\n            lightAngle = token.data.lightAngle;\n            lockRotation = token.data.lockRotation;\n        }\n        // Update Token\n        console.log(token);\n        token.update({\n          vision: true,\n          dimSight: dimSight,\n          brightSight: brightSight,\n          dimLight: dimLight,\n          brightLight:  brightLight,\n          lightAngle: lightAngle,\n          lockRotation: lockRotation\n        });\n      }\n    }\n  }\n}).render(true);\n","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"p8daoiwkQPAnOJNm","name":"Token Multi Select","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"/*\nSwap the selected token with another of similar name via a\ndrop-down menu in a dialog box.\n\nTokens for each character should be named similarly but end with\n'_walking.png', '_fighting.png', and '_sneaking.png'. For example,\n'talion_walking.png', 'talion_fighting.png', and 'talion_sneaking.png'\n\nIf a token does not exist, mystery man will be automatically selected.\n*/\n\nif (actor !== undefined && actor !== null) {\n  let d = new Dialog({\n    title: 'Token Mogrifier',\n    content: \"<p>Select a new token</p>\" +\n      \"<select name='token' id='token'>\" +\n        \"<option value='_walking.png'>Walking</option>\" +\n        \"<option value='_fighting.png'>Fighting</option>\" +\n        \"<option value='_sneaking.png'>Sneaking</option>\" +\n        \"<option value='_unconscious.png'>Unconscious</option>\" +\n      \"</select>\",\n    buttons: {\n      ok: {\n        icon: '<i class=\"fas fa-check\"></i>',\n        label: \"Do it!\",\n        callback: () =>\n          token.update({\n            img: token.data.img.slice(0, token.data.img.lastIndexOf('_')) + document.getElementById(\"token\").value\n          })\n      },\n      cancel: {\n        icon: '<i class=\"fas fa-times\"></i>',\n        label: \"Nevermind\",\n        callback: () => {}\n      }\n    }\n  });\n  d.render(true);\n} else {\n  ui.notifications.warn(\"Please select a token.\");\n}\n","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"show_token_actions.js","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"/*\n* Requires: DND5e.\n* Provides a dialog showing all action-triggered equipment, prepared and at-will spells, feats, and consumables,\n* as well as passive feats. Hopefully makes triggering actions easier without needing the character sheet open\n* all the time.\n* WARNING: Very ugly.\n* author/blame: ^ and stick#0520\n* with enormous help on the button events (and no blame to be attributed to): Skimble#8601\n*/\n\nclass ActionDialog extends Application {\n    super(options){\n    }\n\n    activateListeners(html) {\n        super.activateListeners(html);\n        const buttons = html.find(\"button[class='show-action-button']\");\n        \n        if (buttons.length > 0)\n            buttons.on(\"click\", event => {this.openActionTab(event, html);});\n    }   \n      \n    openActionTab(event, html) {\n        // Declare all variables\n        var i, tabcontent, tablinks;\n      \n        // Get all elements with class=\"tabcontent\" and hide them\n        tabcontent = document.getElementsByClassName(\"show-action-category\");\n        for (let t of tabcontent) {\n          t.style.display = \"none\";\n        }\n      \n        // Get all elements with class=\"tablinks\" and remove the class \"active\"\n        tablinks = document.getElementsByClassName(\"show-action-button\");\n        for (let t of tablinks) {\n          t.className = t.className.replace(\" active\", \"\");\n        }\n      \n        // Show the current tab, and add an \"active\" class to the button that opened the tab\n        if (event.target.value == \"showActionAll\") {\n            tabcontent = document.getElementsByClassName(\"show-action-category\");\n            for (let t of tabcontent) {\n                t.style.display= \"block\";\n            }\n        } else {\n            if (document.getElementById(event.target.value) != null)\n                document.getElementById(event.target.value).style.display = \"block\";\n        }\n        event.currentTarget.className += \" active\";\n    } \n\n    getData(){\n        // Get user's character or the first token from the controlled list.\n        function getTargetActor() {\n            const character = game.user.character;\n            if (character != null)\n                return character;\n\n            const controlled = canvas.tokens.controlled;\n\n            if (controlled.length === 0) return character || null;\n\n            if (controlled.length > 0 && controlled[0] != null) {\n                return controlled[0].actor;\n            }\n        }\n\n        function buildActionsList(targetActor) {\n            let equipped = targetActor.data.items.filter(i => i.type !=\"consumable\" && i.data.equipped);\n            let activeEquipped = getActiveEquipment(equipped);\n            let weapons = activeEquipped.filter(i => i.type == \"weapon\");\n            let equipment = activeEquipped.filter(i => i.type == \"equipment\");\n\n            let other = activeEquipped.filter(i => i.type != \"weapon\" && i.type != \"equipment\");\n            let consumables = targetActor.data.items.filter(i => i.type == \"consumable\");\n            let items = { \"weapons\": weapons, \"equipment\": equipment, \"other\": other, \"consumables\": consumables };\n\n            let preparedSpells = targetActor.data.items.filter(i => i.type == \"spell\" && i.data.preparation.prepared);\n            let spells = categoriseSpells(preparedSpells);\n\n            let allFeats = targetActor.data.items.filter(i => i.type == \"feat\");\n            let activeFeats = getActiveFeats(allFeats);\n            let passiveFeats =  getPassiveFeats(allFeats);\n            let feats = {\"active\": activeFeats, \"passive\": passiveFeats};\n            \n\n            return { \"equipment\": items,\"spells\": spells, \"feats\": feats };\n        }\n\n        function getActiveEquipment(equipment) {\n            const activationTypes = Object.entries(game.dnd5e.config.abilityActivationTypes);\n\n            let activeEquipment = equipment.filter(e => {\n                if (e.data.activation == undefined)\n                    return false;\n\n                for (let [key, value] of activationTypes) {\n                    if (e.data.activation.type == key)\n                        return true;\n                }\n                \n                return false;\n            });\n\n            return activeEquipment;\n        }\n\n        function categoriseSpells(spells) {\n            let powers = {};\n            let book = {}\n\n            book = spells.reduce(function (book, spell) {\n                var level = spell.data.level;\n                let prep = spell.data.preparation.mode;\n\n                const prepTypes = game.dnd5e.config.spellPreparationModes;\n                let prepType = prepTypes[prep];\n\n                if (prep == \"pact\" || prep == \"atwill\" || prep == \"innate\") {\n                    if (!powers.hasOwnProperty(prepType)) {\n                        powers[prepTypes[prep]] = [];\n                    }\n\n                    powers[prepType].push(spell);\n                } else {\n                    if (!book.hasOwnProperty(level)) {\n                        book[level] = [];\n                    }\n\n                    book[level].push(spell);\n                }\n\n                return book;\n            }, {});\n            \n            return {\"book\": Object.entries(book), \"powers\": Object.entries(powers)};\n        }\n\n        function getActiveFeats(feats) {\n            const activationTypes = Object.entries(game.dnd5e.config.abilityActivationTypes);\n            let activeFeats = feats.filter(f => {\n                if (f.data.activation == undefined)\n                    return false;\n\n                for (let [key, value] of activationTypes) {\n                    if (f.data.activation.type == key)\n                        return true;\n                }\n                \n                return false;\n            });\n\n            return Object.entries(activeFeats);\n        }\n\n        function getPassiveFeats(feats) {\n            const activationTypes = Object.entries(game.dnd5e.config.abilityActivationTypes);\n            let passiveFeats = feats.filter(f => {\n                if (f.data.activation == undefined)\n                    return false;\n\n                for (let [key, value] of activationTypes) {\n                    if (f.data.activation.type == key)\n                        return false;\n                }\n                \n                return true;\n            });\n\n            return Object.entries(passiveFeats);\n        }\n\n        function getContentTemplate(actions) {\n            let template = `\n            <div>\n                 ${getCssStyle()}\n                <div class=\"show-action-form-group\">\n                    <div class=\"show-action-buttons\">\n                        <button value=\"showActionItems\" class=\"show-action-button\">Items</button>\n                        <button value=\"showActionSpells\" class=\"show-action-button\">Spells</button>\n                        <button value=\"showActionFeats\" class=\"show-action-button\">Feats</button>\n                        <button value=\"showActionAll\" class=\"show-action-button\">Show all</button>\n                    </div>\n                    </div>\n                    <div class=\"show-action-categories\">\n                        <div id=\"showActionItems\" class=\"show-action-category\">\n                            ${getItemsTemplate(actions.equipment)}\n                        </div>\n                        <div id=\"showActionSpells\" class=\"show-action-category\">\n                            ${getSpellsTemplate(actions.spells)}\n                        <div id=\"showActionFeats\" class=\"show-action-category\">\n                            ${getFeatsTemplate(actions.feats)}\n                        </div>\n                    </div>\n                </div>\n            </div>`;\n            \n            return template;\n        }\n\n                // Gets a template of abilities or skills, based on the type of check chosen.\n        function getItemsTemplate(items) {\n            if (items.weapons.length + items.equipment.length + items.other.length + items.consumables.length === 0)\n                return \"\";\n\n            let template = `<div id=\"actionItems\" class=\"show-action-tabcontent\">\n                                <div class=\"show-action-tabcontent-title\">Items</div>\n                                    ${getItemsCategoryTemplate(\"Weapons\", items.weapons)}\n                                    ${getItemsCategoryTemplate(\"Equipment\", items.equipment)}\n                                    ${getItemsCategoryTemplate(\"Other\", items.other)}\n                                    ${getItemsCategoryTemplate(\"Consumables\", items.consumables)}\n                                </div>\n                            </div>`;\n\n            return template;\n        }\n\n        function getSpellsTemplate(spells) {                \n            let template = `<div id=\"actionSpells\" class=\"show-action-tabcontent\">\n                                <div class=\"show-action-tabcontent-title\">Spells</div>\n                                    ${getSpellsCategoryTemplate(spells.powers)}\n                                    ${getSpellsCategoryTemplate(spells.book)}\n                                </div>\n                            </div>`;\n\n            return template;\n        }\n        \n        function getFeatsTemplate(feats) {\n            if (feats.active.length + feats.passive.length === 0)\n                return \"\";\n\n            let template = `<div id=\"actionFeats\" class=\"show-action-tabcontent\">\n                                <div class=\"show-action-tabcontent-title\">Feats</div>\n                                    ${getFeatsCategoryTemplate(\"Active\", feats.active)}\n                                    ${getFeatsCategoryTemplate(\"Passive\", feats.passive)}\n                                </div>\n                            </div>`;\n\n            return template;\n        }\n\n        function getItemsCategoryTemplate(title, items) {\n            if (items.length === 0)\n                return \"\";\n\n            let template = `<div class=\"show-action-tabcontent-subtitle\">${title}</div>\n                            <div class=\"show-action-tabcontent-actions\">`;\n            for (let i of items) {\n                template += `<input id=\"weapon-${i.name}\" type=\"button\" value=\"${i.name}\" onclick=\"${getRollItemMacro(i.name)}\"/>`;    \n            } \n\n            template += `</div>`;\n\n            return template;\n        }\n\n        function getSpellsCategoryTemplate(spells) {\n            if (spells.length === 0)\n                return \"\";\n\n            let template = \"\";\n\n            for (let [level, entries] of spells) {\n                console.log(isNumber(level.toString()));\n                let subtitle = !isNumber(level) ? level : (level === 0 ? `Cantrips` : `Level ${level}`);\n\n                template += `<div class=\"show-action-tabcontent-subtitle\">${subtitle}</div>\n                                <div class=\"show-action-tabcontent-actions\">`;\n        \n                for (let s of entries) {\n                    template += `<input id=\"spell-${s.name}\" type=\"button\" value=\"${s.name}\" onclick=\"${getRollItemMacro(s.name)}\"/>`;    \n                }\n    \n                template += `</div>`;\n            }\n            \n            return template;\n        }\n\n        function getFeatsCategoryTemplate(subtitle, feats) {\n            if (feats.length === 0)\n                return \"\";\n            \n            let template = `<div class=\"show-action-tabcontent-subtitle\">${subtitle}</div>\n                            <div class=\"show-action-tabcontent-actions\">`\n                            \n            for (let [index, f] of feats) {\n                template += `<input id=\"feat-${f.name}\" type=\"button\" value=\"${f.name}\" onclick=\"${getRollItemMacro(f.name)}\"/>`;    \n            }\n\n            template += `</div>`\n            \n\n            return template;\n        }\n\n        function getCssStyle() {\n            return `\n            <style type=\"text/css\">\n            .show-action-buttons {\n                display: grid;\n                grid-template-columns: repeat(5, 1fr);\n                grid-gap: 10px;\n            }\n\n            .show-action-buttons button {\n                width: auto;\n                height: auto;\n                background-color: #eee;\n                float: left;\n                border: none;\n                outline: none;\n                cursor: pointer;\n                padding: 5px 8px;\n                transition: 0.3s;\n                display: block;\n              }\n                            \n              /* Change background color of buttons on hover */\n              .show-action-buttons button:hover {\n                background-color: #ddd;\n              }\n              \n              /* Create an active/current tablink class */\n              .show-action-buttons button.active {\n                background-color: #ccc;\n              }\n\n              .show-action-categories {\n                clear: both;\n              }\n              \n              /* Style the tab content */\n              .show-action-tabcontent {\n                display: block;\n                padding: 6px 12px;\n                border: 1px solid #ccc;\n                border-bottom: none;\n                border-left: none;\n                border-right: none;\n              }\n\n              .show-action-tabcontent-title {\n                    clear: both;\n                    font-size: large;\n              }\n\n              .show-action-tabcontent-subtitle {\n                  padding: 5px;\n                  margin: 2px;\n                  float: left;\n              }\n\n              .show-action-tabcontent input {\n                border: 1px solid #555;\n                padding: 5px;\n                margin: 2px;\n              }\n              \n              .show-action-tabcontent input:hover {\n              background-color: #ddd;\n              }\n            </style>`\n        }\n\n        function getRollItemMacro(itemName) {\n            return `game.dnd5e.rollItemMacro(&quot;${itemName}&quot;)`;\n        }\n\n        // set this to true if you want results whispered to the GM\n        let targetActor = getTargetActor();\n        let innerContent = \"\";\n\n        if (targetActor != null || targetActor) {\n            this.options.title = `${targetActor.name} actions`;\n            let actionLists = buildActionsList(targetActor);\n            innerContent = getContentTemplate(actionLists);\n        } else {\n            ui.notifications.error(\"No token selected or user character found.\");\n            throw new Error(\"No token selected or character found\");\n        }\n        \n        var content =  `<div id=\"actionDialog\">${innerContent}</div>`;\n        var contentsObject = {content:`${content}`}\n        return contentsObject;\n    }\n}\n\nlet opt=Dialog.defaultOptions;\nopt.resizable=true;\nopt.title=\"Choose action\";\nopt.minimizable=true;\nopt.width=600;\nvar viewer;\nviewer = new ActionDialog(opt);\nviewer.render(true);\n","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"naYLv9mgsdGkrUdX"}
{"_id":"naYLv9mgsdGkrUdX","name":"Show Token Actions","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"script","flags":{},"scope":"global","command":"/*\n* Requires: DND5e.\n* Provides a dialog showing all action-triggered equipment, prepared and at-will spells, feats, and consumables,\n* as well as passive feats. Hopefully makes triggering actions easier without needing the character sheet open\n* all the time.\n* WARNING: Very ugly.\n* author/blame: ^ and stick#0520\n* with enormous help on the button events (and no blame to be attributed to): Skimble#8601\n*/\n\nclass ActionDialog extends Application {\n    super(options){\n    }\n\n    activateListeners(html) {\n        super.activateListeners(html);\n        const buttons = html.find(\"button[class='show-action-button']\");\n        \n        if (buttons.length > 0)\n            buttons.on(\"click\", event => {this.openActionTab(event, html);});\n    }   \n      \n    openActionTab(event, html) {\n        // Declare all variables\n        var i, tabcontent, tablinks;\n      \n        // Get all elements with class=\"tabcontent\" and hide them\n        tabcontent = document.getElementsByClassName(\"show-action-category\");\n        for (let t of tabcontent) {\n          t.style.display = \"none\";\n        }\n      \n        // Get all elements with class=\"tablinks\" and remove the class \"active\"\n        tablinks = document.getElementsByClassName(\"show-action-button\");\n        for (let t of tablinks) {\n          t.className = t.className.replace(\" active\", \"\");\n        }\n      \n        // Show the current tab, and add an \"active\" class to the button that opened the tab\n        if (event.target.value == \"showActionAll\") {\n            tabcontent = document.getElementsByClassName(\"show-action-category\");\n            for (let t of tabcontent) {\n                t.style.display= \"block\";\n            }\n        } else {\n            if (document.getElementById(event.target.value) != null)\n                document.getElementById(event.target.value).style.display = \"block\";\n        }\n        event.currentTarget.className += \" active\";\n    } \n\n    getData(){\n        // Get user's character or the first token from the controlled list.\n        function getTargetActor() {\n            const character = game.user.character;\n            if (character != null)\n                return character;\n\n            const controlled = canvas.tokens.controlled;\n\n            if (controlled.length === 0) return character || null;\n\n            if (controlled.length > 0 && controlled[0] != null) {\n                return controlled[0].actor;\n            }\n        }\n\n        function buildActionsList(targetActor) {\n            let equipped = targetActor.data.items.filter(i => i.type !=\"consumable\" && i.data.equipped);\n            let activeEquipped = getActiveEquipment(equipped);\n            let weapons = activeEquipped.filter(i => i.type == \"weapon\");\n            let equipment = activeEquipped.filter(i => i.type == \"equipment\");\n\n            let other = activeEquipped.filter(i => i.type != \"weapon\" && i.type != \"equipment\");\n            let consumables = targetActor.data.items.filter(i => i.type == \"consumable\");\n            let items = { \"weapons\": weapons, \"equipment\": equipment, \"other\": other, \"consumables\": consumables };\n\n            let preparedSpells = targetActor.data.items.filter(i => i.type == \"spell\" && i.data.preparation.prepared);\n            let spells = categoriseSpells(preparedSpells);\n\n            let allFeats = targetActor.data.items.filter(i => i.type == \"feat\");\n            let activeFeats = getActiveFeats(allFeats);\n            let passiveFeats =  getPassiveFeats(allFeats);\n            let feats = {\"active\": activeFeats, \"passive\": passiveFeats};\n            \n\n            return { \"equipment\": items,\"spells\": spells, \"feats\": feats };\n        }\n\n        function getActiveEquipment(equipment) {\n            const activationTypes = Object.entries(game.dnd5e.config.abilityActivationTypes);\n\n            let activeEquipment = equipment.filter(e => {\n                if (e.data.activation == undefined)\n                    return false;\n\n                for (let [key, value] of activationTypes) {\n                    if (e.data.activation.type == key)\n                        return true;\n                }\n                \n                return false;\n            });\n\n            return activeEquipment;\n        }\n\n        function categoriseSpells(spells) {\n            let powers = {};\n            let book = {}\n\n            book = spells.reduce(function (book, spell) {\n                var level = spell.data.level;\n                let prep = spell.data.preparation.mode;\n\n                const prepTypes = game.dnd5e.config.spellPreparationModes;\n                let prepType = prepTypes[prep];\n\n                if (prep == \"pact\" || prep == \"atwill\" || prep == \"innate\") {\n                    if (!powers.hasOwnProperty(prepType)) {\n                        powers[prepTypes[prep]] = [];\n                    }\n\n                    powers[prepType].push(spell);\n                } else {\n                    if (!book.hasOwnProperty(level)) {\n                        book[level] = [];\n                    }\n\n                    book[level].push(spell);\n                }\n\n                return book;\n            }, {});\n            \n            return {\"book\": Object.entries(book), \"powers\": Object.entries(powers)};\n        }\n\n        function getActiveFeats(feats) {\n            const activationTypes = Object.entries(game.dnd5e.config.abilityActivationTypes);\n            let activeFeats = feats.filter(f => {\n                if (f.data.activation == undefined)\n                    return false;\n\n                for (let [key, value] of activationTypes) {\n                    if (f.data.activation.type == key)\n                        return true;\n                }\n                \n                return false;\n            });\n\n            return Object.entries(activeFeats);\n        }\n\n        function getPassiveFeats(feats) {\n            const activationTypes = Object.entries(game.dnd5e.config.abilityActivationTypes);\n            let passiveFeats = feats.filter(f => {\n                if (f.data.activation == undefined)\n                    return false;\n\n                for (let [key, value] of activationTypes) {\n                    if (f.data.activation.type == key)\n                        return false;\n                }\n                \n                return true;\n            });\n\n            return Object.entries(passiveFeats);\n        }\n\n        function getContentTemplate(actions) {\n            let template = `\n            <div>\n                 ${getCssStyle()}\n                <div class=\"show-action-form-group\">\n                    <div class=\"show-action-buttons\">\n                        <button value=\"showActionItems\" class=\"show-action-button\">Items</button>\n                        <button value=\"showActionSpells\" class=\"show-action-button\">Spells</button>\n                        <button value=\"showActionFeats\" class=\"show-action-button\">Feats</button>\n                        <button value=\"showActionAll\" class=\"show-action-button\">Show all</button>\n                    </div>\n                    </div>\n                    <div class=\"show-action-categories\">\n                        <div id=\"showActionItems\" class=\"show-action-category\">\n                            ${getItemsTemplate(actions.equipment)}\n                        </div>\n                        <div id=\"showActionSpells\" class=\"show-action-category\">\n                            ${getSpellsTemplate(actions.spells)}\n                        <div id=\"showActionFeats\" class=\"show-action-category\">\n                            ${getFeatsTemplate(actions.feats)}\n                        </div>\n                    </div>\n                </div>\n            </div>`;\n            \n            return template;\n        }\n\n                // Gets a template of abilities or skills, based on the type of check chosen.\n        function getItemsTemplate(items) {\n            if (items.weapons.length + items.equipment.length + items.other.length + items.consumables.length === 0)\n                return \"\";\n\n            let template = `<div id=\"actionItems\" class=\"show-action-tabcontent\">\n                                <div class=\"show-action-tabcontent-title\">Items</div>\n                                    ${getItemsCategoryTemplate(\"Weapons\", items.weapons)}\n                                    ${getItemsCategoryTemplate(\"Equipment\", items.equipment)}\n                                    ${getItemsCategoryTemplate(\"Other\", items.other)}\n                                    ${getItemsCategoryTemplate(\"Consumables\", items.consumables)}\n                                </div>\n                            </div>`;\n\n            return template;\n        }\n\n        function getSpellsTemplate(spells) {                \n            let template = `<div id=\"actionSpells\" class=\"show-action-tabcontent\">\n                                <div class=\"show-action-tabcontent-title\">Spells</div>\n                                    ${getSpellsCategoryTemplate(spells.powers)}\n                                    ${getSpellsCategoryTemplate(spells.book)}\n                                </div>\n                            </div>`;\n\n            return template;\n        }\n        \n        function getFeatsTemplate(feats) {\n            if (feats.active.length + feats.passive.length === 0)\n                return \"\";\n\n            let template = `<div id=\"actionFeats\" class=\"show-action-tabcontent\">\n                                <div class=\"show-action-tabcontent-title\">Feats</div>\n                                    ${getFeatsCategoryTemplate(\"Active\", feats.active)}\n                                    ${getFeatsCategoryTemplate(\"Passive\", feats.passive)}\n                                </div>\n                            </div>`;\n\n            return template;\n        }\n\n        function getItemsCategoryTemplate(title, items) {\n            if (items.length === 0)\n                return \"\";\n\n            let template = `<div class=\"show-action-tabcontent-subtitle\">${title}</div>\n                            <div class=\"show-action-tabcontent-actions\">`;\n            for (let i of items) {\n                template += `<input id=\"weapon-${i.name}\" type=\"button\" value=\"${i.name}\" onclick=\"${getRollItemMacro(i.name)}\"/>`;    \n            } \n\n            template += `</div>`;\n\n            return template;\n        }\n\n        function getSpellsCategoryTemplate(spells) {\n            if (spells.length === 0)\n                return \"\";\n\n            let template = \"\";\n\n            for (let [level, entries] of spells) {\n                console.log(isNumber(level.toString()));\n                let subtitle = !isNumber(level) ? level : (level === 0 ? `Cantrips` : `Level ${level}`);\n\n                template += `<div class=\"show-action-tabcontent-subtitle\">${subtitle}</div>\n                                <div class=\"show-action-tabcontent-actions\">`;\n        \n                for (let s of entries) {\n                    template += `<input id=\"spell-${s.name}\" type=\"button\" value=\"${s.name}\" onclick=\"${getRollItemMacro(s.name)}\"/>`;    \n                }\n    \n                template += `</div>`;\n            }\n            \n            return template;\n        }\n\n        function getFeatsCategoryTemplate(subtitle, feats) {\n            if (feats.length === 0)\n                return \"\";\n            \n            let template = `<div class=\"show-action-tabcontent-subtitle\">${subtitle}</div>\n                            <div class=\"show-action-tabcontent-actions\">`\n                            \n            for (let [index, f] of feats) {\n                template += `<input id=\"feat-${f.name}\" type=\"button\" value=\"${f.name}\" onclick=\"${getRollItemMacro(f.name)}\"/>`;    \n            }\n\n            template += `</div>`\n            \n\n            return template;\n        }\n\n        function getCssStyle() {\n            return `\n            <style type=\"text/css\">\n            .show-action-buttons {\n                display: grid;\n                grid-template-columns: repeat(5, 1fr);\n                grid-gap: 10px;\n            }\n\n            .show-action-buttons button {\n                width: auto;\n                height: auto;\n                background-color: #eee;\n                float: left;\n                border: none;\n                outline: none;\n                cursor: pointer;\n                padding: 5px 8px;\n                transition: 0.3s;\n                display: block;\n              }\n                            \n              /* Change background color of buttons on hover */\n              .show-action-buttons button:hover {\n                background-color: #ddd;\n              }\n              \n              /* Create an active/current tablink class */\n              .show-action-buttons button.active {\n                background-color: #ccc;\n              }\n\n              .show-action-categories {\n                clear: both;\n              }\n              \n              /* Style the tab content */\n              .show-action-tabcontent {\n                display: block;\n                padding: 6px 12px;\n                border: 1px solid #ccc;\n                border-bottom: none;\n                border-left: none;\n                border-right: none;\n              }\n\n              .show-action-tabcontent-title {\n                    clear: both;\n                    font-size: large;\n              }\n\n              .show-action-tabcontent-subtitle {\n                  padding: 5px;\n                  margin: 2px;\n                  float: left;\n              }\n\n              .show-action-tabcontent input {\n                border: 1px solid #555;\n                padding: 5px;\n                margin: 2px;\n              }\n              \n              .show-action-tabcontent input:hover {\n              background-color: #ddd;\n              }\n            </style>`\n        }\n\n        function getRollItemMacro(itemName) {\n            return `game.dnd5e.rollItemMacro(&quot;${itemName}&quot;)`;\n        }\n\n        // set this to true if you want results whispered to the GM\n        let targetActor = getTargetActor();\n        let innerContent = \"\";\n\n        if (targetActor != null || targetActor) {\n            this.options.title = `${targetActor.name} actions`;\n            let actionLists = buildActionsList(targetActor);\n            innerContent = getContentTemplate(actionLists);\n        } else {\n            ui.notifications.error(\"No token selected or user character found.\");\n            throw new Error(\"No token selected or character found\");\n        }\n        \n        var content =  `<div id=\"actionDialog\">${innerContent}</div>`;\n        var contentsObject = {content:`${content}`}\n        return contentsObject;\n    }\n}\n\nlet opt=Dialog.defaultOptions;\nopt.resizable=true;\nopt.title=\"Choose action\";\nopt.minimizable=true;\nopt.width=600;\nvar viewer;\nviewer = new ActionDialog(opt);\nviewer.render(true);\n","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[]}
